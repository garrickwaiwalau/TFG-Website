# Name of your application. Used to uniquely configure containers.
service: tfg-website

# Name of the container image.
image: garricklww/tfg-website

# Deploy to these servers.
servers:
  web:
    hosts:
      - 82.29.155.181
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  hosts:
    - tfglog.ca
    - tfglog.com
    - trustfreightglobal.ca
    - trustfreightglobal.com
    - www.tfglog.ca
    - www.tfglog.com
    - www.trustfreightglobal.ca
    - www.trustfreightglobal.com
  # Proxy connects to your container on port 80 by default.
  app_port: 3000
  healthcheck:
    path: /up
    interval: 20
    timeout: 5

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: garricklww

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= ENV["RBENV_VERSION"] || ENV["rvm_ruby_string"] || "#{RUBY_ENGINE}-#{RUBY_ENGINE_VERSION}" %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
env:
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    # DB_HOST: 192.168.0.2
    SOLID_QUEUE_IN_PUMA: true

  secret:
    - RAILS_MASTER_KEY
    - DATABASE_HOST
    - DATABASE_PORT
    - DATABASE_USERNAME
    - DATABASE_PASSWORD
    - COMPANY_EMAIL
    - COMPANY_EMAIL_PASSWORD
    - CONTACT_FORM_RECIPIENT
    - QUOTE_FORM_RECIPIENT
    - SENDGRID_API_KEY
    - STANDARD_OCEAN_STATUS
    - STANDARD_AIR_STATUS
    - WEB_CONCURRENCY
    - ONEDRIVE_CLIENT_ID
    - ONEDRIVE_CLIENT_SECRET
    - ONEDRIVE_TENANT_ID
    - ONEDRIVE_DRIVE_ID
    - REDIS_URL

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
#
# ssh:
#   user: root
# key: ~/.ssh/id_ed25519

# Use a persistent storage volume.
#
# volumes:
#  - "app_storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
asset_path: /rails/public/assets

accessories:
  redis:
    image: redis:latest
    roles:
      - web
    cmd: "redis-server /usr/local/etc/redis/redis.conf"
    network: kamal
    volumes:
      - redis:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro

volumes:
  - redis

# healthcheck enabled in kamal.yml
#healthcheck:
#  cmd: "curl -f http://localhost:3000"
#  port: 3000
#  path: /up
#  interval: 10s
#  timeout: 5s
#  max_attempts: 5

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#accessories:
# db:
#   image: postgres:16
#   host: 82.29.155.181
#   port: 5432:5432
#   env:
#     clear:
#       POSTGRES_USER: pguser
#       POSTGRES_DB: tfg_production
#     secret:
#       - POSTGRES_PASSWORD
#   directories:
#     - data:/var/lib/postgresql/data
